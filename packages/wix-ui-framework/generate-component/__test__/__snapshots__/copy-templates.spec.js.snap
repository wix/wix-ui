// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`copyTemplates should work as expected when description is not provided 1`] = `
Object {
  "src/MyNewComponent/MyNewComponent.js": "import React from 'react';
import PropTypes from 'prop-types';

import Text from '../Text';
import Button from '../Button';
import styles from './MyNewComponent.st.css';


class MyNewComponent extends React.PureComponent {
  static displayName = 'MyNewComponent';

  static propTypes = {
    dataHook: PropTypes.string,

    /** Text for the button */
    buttonText: PropTypes.string,
  };

  static defaultProps = {
    buttonText: 'Click me!',
  };

  state = {
    count: 0,
  };

  _handleClick = () => {
    this.setState(({ count }) => ({
      count: count + 1,
    }));
  };

  render() {
    const { count } = this.state;
    const { dataHook, buttonText } = this.props;
    const isEven = count % 2 === 0;

    return (
      <div className={styles.root} data-hook={dataHook}>
        <Text dataHook=\\"myNewComponent-count\\">
          You clicked this button {isEven ? 'even' : 'odd'} number (
          <span
            {...styles('number', { even: isEven, odd: !isEven }, this.props)}
          >
            {count}
          </span>
          ) of times
        </Text>

        <div className={styles.button}>
          <Button
            onClick={this._handleClick}
            dataHook=\\"myNewComponent-button\\"
          >
            {buttonText}
          </Button>
        </div>
      </div>
    );
  }
}

export default MyNewComponent;
",
  "src/MyNewComponent/MyNewComponent.meta.js": "import MyNewComponent from './MyNewComponent';
import Registry from '@ui-autotools/registry';

const metadata = Registry.getComponentMetadata(MyNewComponent);

metadata.exportedFrom({
  path: 'src/MyNewComponent/MyNewComponent.js',
});
",
  "src/MyNewComponent/MyNewComponent.st.css": ":import {
  -st-from: \\"wix-ui-core/dist/src/themes/backoffice/colors.st.css\\";
  -st-named: G30,R30;
}

.root {
  text-align: center;
}

.number {
  -st-states: odd, even;
}

.number:even {
  background: value(G30);
}

.number:odd {
  background: value(R30);
}

.button {
  display: flex;
  justify-content: space-evenly;
}
",
  "src/MyNewComponent/MyNewComponent.uni.driver.js": "import { baseUniDriverFactory } from 'wix-ui-test-utils/base-driver';

export const myNewComponentDriverFactory = base => {
  return {
    ...baseUniDriverFactory(base),

    /** Get the current count */
    getCountText: async () =>
      base.$('[data-hook=\\"myNewComponent-count\\"]').text(),

    /** Click the button */
    clickButton: async () =>
      base.$('[data-hook=\\"myNewComponent-button\\"]').click(),

    /** Get the button's text */
    getButtonText: async () =>
      base.$('[data-hook=\\"myNewComponent-button\\"]').text(),
  };
};
",
  "src/MyNewComponent/docs/index.story.js": "import React from 'react';
import {
  header,
  tabs,
  tab,
  description,
  importExample,
  title,
  columns,
  divider,
  code as baseCode,
  playground,
  api,
  testkit,
} from 'wix-storybook-utils/Sections';

import { storySettings } from '../test/storySettings';
import allComponents from '../../../stories/utils/allComponents';

import MyNewComponent from '..';

const code = config => baseCode({ components: allComponents, ...config });

export default {
  category: storySettings.category,
  storyName: 'MyNewComponent',

  component: MyNewComponent,
  componentPath: '..',

  componentProps: {
    buttonText: 'Hello World!',
  },

  exampleProps: {
    // Put here presets of props, for more info:
    // https://github.com/wix/wix-ui/blob/master/packages/wix-storybook-utils/docs/usage.md#using-list
  },

  sections: [
    header({
      issueUrl: 'https://github.com/wix/wix-style-react/issues/new',
      sourceUrl:
        'https://github.com/wix/wix-style-react/tree/master/src/MyNewComponent/',
      component: <MyNewComponent buttonText=\\"Click me!\\" />,
    }),

    tabs([
      tab({
        title: 'Description',
        sections: [
          columns([
            description({
              title: 'Description',
              text:
                'This line here should briefly describe component in just a sentence or two. It should be short and easy to read.',
            }),
          ]),

          columns([
            importExample(
              \\"import MyNewComponent from 'wix-style-react/MyNewComponent';\\",
            ),
          ]),

          divider(),

          title('Examples'),

          columns([
            description({
              title: 'Simple Usage',
              text: 'A simple example with compact preview',
            }),

            code({
              compact: true,
              source: '<MyNewComponent buttonText=\\"Hello World!\\"/>',
            }),
          ]),

          code({
            title: 'Full Interactive Preview',
            description: 'A non compact version of same code example as above',
            source: '<MyNewComponent buttonText=\\"Hello World!\\"/>',
          }),
        ],
      }),

      ...[
        { title: 'API', sections: [api()] },
        { title: 'Testkit', sections: [testkit()] },
        { title: 'Playground', sections: [playground()] },
      ].map(tab),
    ]),
  ],
};
",
  "src/MyNewComponent/index.js": "export { default } from './MyNewComponent.js';
",
  "src/MyNewComponent/test/MyNewComponent.e2e.js": "import {
  waitForVisibilityOf,
  scrollToElement,
} from 'wix-ui-test-utils/protractor';

import { eyesItInstance } from '../../../test/utils/eyes-it';
import { createTestStoryUrl } from '../../../test/utils/storybook-helpers';
import { myNewComponentTestkitFactory } from '../../../testkit/protractor';
import { storySettings } from './storySettings';

const eyes = eyesItInstance();

describe('MyNewComponent', () => {
  const createStoryUrl = testName =>
    createTestStoryUrl({ ...storySettings, testName });

  const createDriver = async (dataHook = storySettings.dataHook) => {
    const driver = myNewComponentTestkitFactory({ dataHook });

    await waitForVisibilityOf(
      await driver.element(),
      \`Cannot find <MyNewComponent/> component with dataHook of \${dataHook}\`,
    );

    await scrollToElement(await driver.element());

    return driver;
  };

  const testStoryNames = storySettings.testStoryNames;

  eyes.it('should increase count when button clicked', async () => {
    await browser.get(createStoryUrl(testStoryNames.DEFAULT));
    const driver = await createDriver();
    await driver.clickButton();
    expect(await driver.getCountText()).toBe('You clicked this button odd number (1) of times');
  });
});
",
  "src/MyNewComponent/test/MyNewComponent.private.uni.driver.js": "import { myNewComponentDriverFactory as publicDriverFactory } from '../MyNewComponent.uni.driver';

export const myNewComponentPrivateDriverFactory = base => {
  return {
    ...publicDriverFactory(base),

    // Add here driver methods that considered \\"private\\"
  };
};
",
  "src/MyNewComponent/test/MyNewComponent.spec.js": "import React from 'react';
import { createRendererWithUniDriver, cleanup } from '../../../test/utils/unit';

import MyNewComponent from '../MyNewComponent';
import { myNewComponentPrivateDriverFactory } from './MyNewComponent.private.uni.driver';

describe('MyNewComponent', () => {
  const render = createRendererWithUniDriver(
    myNewComponentPrivateDriverFactory,
  );

  afterEach(() => {
    cleanup();
  });

  it('should render', async () => {
    const { driver } = render(<MyNewComponent />);

    expect(await driver.exists()).toBeTruthy();
    expect(await driver.getButtonText()).toEqual('Click me!');
  });

  it('should increment', async () => {
    const { driver } = render(<MyNewComponent />);

    await driver.clickButton();
    await driver.clickButton();

    expect(await driver.getCountText()).toEqual(
      'You clicked this button even number (2) of times',
    );
  });

  it('should allow changing the button text', async () => {
    const { driver } = render(<MyNewComponent buttonText=\\"Press me\\" />);

    expect(await driver.getButtonText()).toEqual('Press me');
  });
});
",
  "src/MyNewComponent/test/MyNewComponent.visual.js": "import React from 'react';
import { storiesOf } from '@storybook/react';
import MyNewComponent from '../MyNewComponent';

const commonProps = {
  //use for repeated props across the tests (e.g. {buttonText: 'example'})
};

const tests = [
  {
    describe: 'sanity', // prop name (e.g. size)
    its: [
      {
        it: 'default', //prop vaiation (e.g. small)
        props: {
          // the simulation (e.g. {size: \\"small\\"})
        },
      },
    ],
  },
];

tests.forEach(({ describe, its }) => {
  its.forEach(({ it, props }) => {
    storiesOf(\`MyNewComponent/\${describe}\`, module).add(it, () => (
      <MyNewComponent {...commonProps} {...props} />
    ));
  });
});
",
  "src/MyNewComponent/test/MyNewComponentStories.js": "import React from 'react';
import { storiesOf } from '@storybook/react';
import { getTestStoryKind } from '../../../stories/storiesHierarchy';
import { storySettings } from './storySettings';

import MyNewComponent from '..';

const TestStories = storiesOf(getTestStoryKind(storySettings), module);
const { testStoryNames, dataHook } = storySettings;

TestStories.add(testStoryNames.DEFAULT, () => (
  <MyNewComponent
    dataHook={dataHook}
    buttonText=\\"Press me for a surprise\\"
  />
));
",
  "src/MyNewComponent/test/storySettings.js": "import { Category } from '../../../stories/storiesHierarchy';

export const storySettings = {
  category: Category.COMPONENTS,
  storyName: 'MyNewComponent',
  dataHook: 'story-my-new-component',
  testStoryNames: {
    DEFAULT: 'Default',
  },
};
",
}
`;

exports[`copyTemplates should work as expected when description is provided 1`] = `
Object {
  "src/MyNewComponent/MyNewComponent.js": "import React from 'react';
import PropTypes from 'prop-types';

import Text from '../Text';
import Button from '../Button';
import styles from './MyNewComponent.st.css';

/**
 * This is a very cool component, ya'll
 */
class MyNewComponent extends React.PureComponent {
  static displayName = 'MyNewComponent';

  static propTypes = {
    dataHook: PropTypes.string,

    /** Text for the button */
    buttonText: PropTypes.string,
  };

  static defaultProps = {
    buttonText: 'Click me!',
  };

  state = {
    count: 0,
  };

  _handleClick = () => {
    this.setState(({ count }) => ({
      count: count + 1,
    }));
  };

  render() {
    const { count } = this.state;
    const { dataHook, buttonText } = this.props;
    const isEven = count % 2 === 0;

    return (
      <div className={styles.root} data-hook={dataHook}>
        <Text dataHook=\\"myNewComponent-count\\">
          You clicked this button {isEven ? 'even' : 'odd'} number (
          <span
            {...styles('number', { even: isEven, odd: !isEven }, this.props)}
          >
            {count}
          </span>
          ) of times
        </Text>

        <div className={styles.button}>
          <Button
            onClick={this._handleClick}
            dataHook=\\"myNewComponent-button\\"
          >
            {buttonText}
          </Button>
        </div>
      </div>
    );
  }
}

export default MyNewComponent;
",
  "src/MyNewComponent/MyNewComponent.meta.js": "import MyNewComponent from './MyNewComponent';
import Registry from '@ui-autotools/registry';

const metadata = Registry.getComponentMetadata(MyNewComponent);

metadata.exportedFrom({
  path: 'src/MyNewComponent/MyNewComponent.js',
});
",
  "src/MyNewComponent/MyNewComponent.st.css": ":import {
  -st-from: \\"wix-ui-core/dist/src/themes/backoffice/colors.st.css\\";
  -st-named: G30,R30;
}

.root {
  text-align: center;
}

.number {
  -st-states: odd, even;
}

.number:even {
  background: value(G30);
}

.number:odd {
  background: value(R30);
}

.button {
  display: flex;
  justify-content: space-evenly;
}
",
  "src/MyNewComponent/MyNewComponent.uni.driver.js": "import { baseUniDriverFactory } from 'wix-ui-test-utils/base-driver';

export const myNewComponentDriverFactory = base => {
  return {
    ...baseUniDriverFactory(base),

    /** Get the current count */
    getCountText: async () =>
      base.$('[data-hook=\\"myNewComponent-count\\"]').text(),

    /** Click the button */
    clickButton: async () =>
      base.$('[data-hook=\\"myNewComponent-button\\"]').click(),

    /** Get the button's text */
    getButtonText: async () =>
      base.$('[data-hook=\\"myNewComponent-button\\"]').text(),
  };
};
",
  "src/MyNewComponent/docs/index.story.js": "import React from 'react';
import {
  header,
  tabs,
  tab,
  description,
  importExample,
  title,
  columns,
  divider,
  code as baseCode,
  playground,
  api,
  testkit,
} from 'wix-storybook-utils/Sections';

import { storySettings } from '../test/storySettings';
import allComponents from '../../../stories/utils/allComponents';

import MyNewComponent from '..';

const code = config => baseCode({ components: allComponents, ...config });

export default {
  category: storySettings.category,
  storyName: 'MyNewComponent',

  component: MyNewComponent,
  componentPath: '..',

  componentProps: {
    buttonText: 'Hello World!',
  },

  exampleProps: {
    // Put here presets of props, for more info:
    // https://github.com/wix/wix-ui/blob/master/packages/wix-storybook-utils/docs/usage.md#using-list
  },

  sections: [
    header({
      issueUrl: 'https://github.com/wix/wix-style-react/issues/new',
      sourceUrl:
        'https://github.com/wix/wix-style-react/tree/master/src/MyNewComponent/',
      component: <MyNewComponent buttonText=\\"Click me!\\" />,
    }),

    tabs([
      tab({
        title: 'Description',
        sections: [
          columns([
            description({
              title: 'Description',
              text:
                'This line here should briefly describe component in just a sentence or two. It should be short and easy to read.',
            }),
          ]),

          columns([
            importExample(
              \\"import MyNewComponent from 'wix-style-react/MyNewComponent';\\",
            ),
          ]),

          divider(),

          title('Examples'),

          columns([
            description({
              title: 'Simple Usage',
              text: 'A simple example with compact preview',
            }),

            code({
              compact: true,
              source: '<MyNewComponent buttonText=\\"Hello World!\\"/>',
            }),
          ]),

          code({
            title: 'Full Interactive Preview',
            description: 'A non compact version of same code example as above',
            source: '<MyNewComponent buttonText=\\"Hello World!\\"/>',
          }),
        ],
      }),

      ...[
        { title: 'API', sections: [api()] },
        { title: 'Testkit', sections: [testkit()] },
        { title: 'Playground', sections: [playground()] },
      ].map(tab),
    ]),
  ],
};
",
  "src/MyNewComponent/index.js": "export { default } from './MyNewComponent.js';
",
  "src/MyNewComponent/test/MyNewComponent.e2e.js": "import {
  waitForVisibilityOf,
  scrollToElement,
} from 'wix-ui-test-utils/protractor';

import { eyesItInstance } from '../../../test/utils/eyes-it';
import { createTestStoryUrl } from '../../../test/utils/storybook-helpers';
import { myNewComponentTestkitFactory } from '../../../testkit/protractor';
import { storySettings } from './storySettings';

const eyes = eyesItInstance();

describe('MyNewComponent', () => {
  const createStoryUrl = testName =>
    createTestStoryUrl({ ...storySettings, testName });

  const createDriver = async (dataHook = storySettings.dataHook) => {
    const driver = myNewComponentTestkitFactory({ dataHook });

    await waitForVisibilityOf(
      await driver.element(),
      \`Cannot find <MyNewComponent/> component with dataHook of \${dataHook}\`,
    );

    await scrollToElement(await driver.element());

    return driver;
  };

  const testStoryNames = storySettings.testStoryNames;

  eyes.it('should increase count when button clicked', async () => {
    await browser.get(createStoryUrl(testStoryNames.DEFAULT));
    const driver = await createDriver();
    await driver.clickButton();
    expect(await driver.getCountText()).toBe('You clicked this button odd number (1) of times');
  });
});
",
  "src/MyNewComponent/test/MyNewComponent.private.uni.driver.js": "import { myNewComponentDriverFactory as publicDriverFactory } from '../MyNewComponent.uni.driver';

export const myNewComponentPrivateDriverFactory = base => {
  return {
    ...publicDriverFactory(base),

    // Add here driver methods that considered \\"private\\"
  };
};
",
  "src/MyNewComponent/test/MyNewComponent.spec.js": "import React from 'react';
import { createRendererWithUniDriver, cleanup } from '../../../test/utils/unit';

import MyNewComponent from '../MyNewComponent';
import { myNewComponentPrivateDriverFactory } from './MyNewComponent.private.uni.driver';

describe('MyNewComponent', () => {
  const render = createRendererWithUniDriver(
    myNewComponentPrivateDriverFactory,
  );

  afterEach(() => {
    cleanup();
  });

  it('should render', async () => {
    const { driver } = render(<MyNewComponent />);

    expect(await driver.exists()).toBeTruthy();
    expect(await driver.getButtonText()).toEqual('Click me!');
  });

  it('should increment', async () => {
    const { driver } = render(<MyNewComponent />);

    await driver.clickButton();
    await driver.clickButton();

    expect(await driver.getCountText()).toEqual(
      'You clicked this button even number (2) of times',
    );
  });

  it('should allow changing the button text', async () => {
    const { driver } = render(<MyNewComponent buttonText=\\"Press me\\" />);

    expect(await driver.getButtonText()).toEqual('Press me');
  });
});
",
  "src/MyNewComponent/test/MyNewComponent.visual.js": "import React from 'react';
import { storiesOf } from '@storybook/react';
import MyNewComponent from '../MyNewComponent';

const commonProps = {
  //use for repeated props across the tests (e.g. {buttonText: 'example'})
};

const tests = [
  {
    describe: 'sanity', // prop name (e.g. size)
    its: [
      {
        it: 'default', //prop vaiation (e.g. small)
        props: {
          // the simulation (e.g. {size: \\"small\\"})
        },
      },
    ],
  },
];

tests.forEach(({ describe, its }) => {
  its.forEach(({ it, props }) => {
    storiesOf(\`MyNewComponent/\${describe}\`, module).add(it, () => (
      <MyNewComponent {...commonProps} {...props} />
    ));
  });
});
",
  "src/MyNewComponent/test/MyNewComponentStories.js": "import React from 'react';
import { storiesOf } from '@storybook/react';
import { getTestStoryKind } from '../../../stories/storiesHierarchy';
import { storySettings } from './storySettings';

import MyNewComponent from '..';

const TestStories = storiesOf(getTestStoryKind(storySettings), module);
const { testStoryNames, dataHook } = storySettings;

TestStories.add(testStoryNames.DEFAULT, () => (
  <MyNewComponent
    dataHook={dataHook}
    buttonText=\\"Press me for a surprise\\"
  />
));
",
  "src/MyNewComponent/test/storySettings.js": "import { Category } from '../../../stories/storiesHierarchy';

export const storySettings = {
  category: Category.COMPONENTS,
  storyName: 'MyNewComponent',
  dataHook: 'story-my-new-component',
  testStoryNames: {
    DEFAULT: 'Default',
  },
};
",
}
`;

exports[`copyTemplates should work for test component 1`] = `
Object {
  "src/MyTestComponent/MyTestComponent.js": "import React from 'react';
import PropTypes from 'prop-types';

import Text from '../Text';
import Button from '../Button';
import styles from './MyTestComponent.st.css';


class MyTestComponent extends React.PureComponent {
  static displayName = 'MyTestComponent';

  static propTypes = {
    dataHook: PropTypes.string,

    /** Text for the button */
    buttonText: PropTypes.string,
  };

  static defaultProps = {
    buttonText: 'Click me!',
  };

  state = {
    count: 0,
  };

  _handleClick = () => {
    this.setState(({ count }) => ({
      count: count + 1,
    }));
  };

  render() {
    const { count } = this.state;
    const { dataHook, buttonText } = this.props;
    const isEven = count % 2 === 0;

    return (
      <div className={styles.root} data-hook={dataHook}>
        <Text dataHook=\\"myTestComponent-count\\">
          You clicked this button {isEven ? 'even' : 'odd'} number (
          <span
            {...styles('number', { even: isEven, odd: !isEven }, this.props)}
          >
            {count}
          </span>
          ) of times
        </Text>

        <div className={styles.button}>
          <Button
            onClick={this._handleClick}
            dataHook=\\"myTestComponent-button\\"
          >
            {buttonText}
          </Button>
        </div>
      </div>
    );
  }
}

export default MyTestComponent;
",
  "src/MyTestComponent/MyTestComponent.meta.js": "import MyTestComponent from './MyTestComponent';
import Registry from '@ui-autotools/registry';

const metadata = Registry.getComponentMetadata(MyTestComponent);

metadata.exportedFrom({
  path: 'src/MyTestComponent/MyTestComponent.js',
});
",
  "src/MyTestComponent/MyTestComponent.st.css": ":import {
  -st-from: \\"wix-ui-core/dist/src/themes/backoffice/colors.st.css\\";
  -st-named: G30,R30;
}

.root {
  text-align: center;
}

.number {
  -st-states: odd, even;
}

.number:even {
  background: value(G30);
}

.number:odd {
  background: value(R30);
}

.button {
  display: flex;
  justify-content: space-evenly;
}
",
  "src/MyTestComponent/MyTestComponent.uni.driver.js": "import { baseUniDriverFactory } from 'wix-ui-test-utils/base-driver';

export const myTestComponentDriverFactory = base => {
  return {
    ...baseUniDriverFactory(base),

    /** Get the current count */
    getCountText: async () =>
      base.$('[data-hook=\\"myTestComponent-count\\"]').text(),

    /** Click the button */
    clickButton: async () =>
      base.$('[data-hook=\\"myTestComponent-button\\"]').click(),

    /** Get the button's text */
    getButtonText: async () =>
      base.$('[data-hook=\\"myTestComponent-button\\"]').text(),
  };
};
",
  "src/MyTestComponent/docs/index.story.js": "import React from 'react';
import {
  header,
  tabs,
  tab,
  description,
  importExample,
  title,
  columns,
  divider,
  code as baseCode,
  playground,
  api,
  testkit,
} from 'wix-storybook-utils/Sections';

import { storySettings } from '../test/storySettings';
import allComponents from '../../../stories/utils/allComponents';

import MyTestComponent from '..';

const code = config => baseCode({ components: allComponents, ...config });

export default {
  category: storySettings.category,
  storyName: 'MyTestComponent',

  component: MyTestComponent,
  componentPath: '..',

  componentProps: {
    buttonText: 'Hello World!',
  },

  exampleProps: {
    // Put here presets of props, for more info:
    // https://github.com/wix/wix-ui/blob/master/packages/wix-storybook-utils/docs/usage.md#using-list
  },

  sections: [
    header({
      issueUrl: 'https://github.com/wix/wix-style-react/issues/new',
      sourceUrl:
        'https://github.com/wix/wix-style-react/tree/master/src/MyTestComponent/',
      component: <MyTestComponent buttonText=\\"Click me!\\" />,
    }),

    tabs([
      tab({
        title: 'Description',
        sections: [
          columns([
            description({
              title: 'Description',
              text:
                'This line here should briefly describe component in just a sentence or two. It should be short and easy to read.',
            }),
          ]),

          columns([
            importExample(
              \\"import MyTestComponent from 'wix-style-react/MyTestComponent';\\",
            ),
          ]),

          divider(),

          title('Examples'),

          columns([
            description({
              title: 'Simple Usage',
              text: 'A simple example with compact preview',
            }),

            code({
              compact: true,
              source: '<MyTestComponent buttonText=\\"Hello World!\\"/>',
            }),
          ]),

          code({
            title: 'Full Interactive Preview',
            description: 'A non compact version of same code example as above',
            source: '<MyTestComponent buttonText=\\"Hello World!\\"/>',
          }),
        ],
      }),

      ...[
        { title: 'API', sections: [api()] },
        { title: 'Testkit', sections: [testkit()] },
        { title: 'Playground', sections: [playground()] },
      ].map(tab),
    ]),
  ],
};
",
  "src/MyTestComponent/index.js": "export { default } from './MyTestComponent.js';
",
  "src/MyTestComponent/test/MyTestComponent.e2e.js": "import {
  waitForVisibilityOf,
  scrollToElement,
} from 'wix-ui-test-utils/protractor';

import { eyesItInstance } from '../../../test/utils/eyes-it';
import { createTestStoryUrl } from '../../../test/utils/storybook-helpers';
import { myTestComponentTestkitFactory } from '../../../testkit/protractor';
import { storySettings } from './storySettings';

const eyes = eyesItInstance();

describe('MyTestComponent', () => {
  const createStoryUrl = testName =>
    createTestStoryUrl({ ...storySettings, testName });

  const createDriver = async (dataHook = storySettings.dataHook) => {
    const driver = myTestComponentTestkitFactory({ dataHook });

    await waitForVisibilityOf(
      await driver.element(),
      \`Cannot find <MyTestComponent/> component with dataHook of \${dataHook}\`,
    );

    await scrollToElement(await driver.element());

    return driver;
  };

  const testStoryNames = storySettings.testStoryNames;

  eyes.it('should increase count when button clicked', async () => {
    await browser.get(createStoryUrl(testStoryNames.DEFAULT));
    const driver = await createDriver();
    await driver.clickButton();
    expect(await driver.getCountText()).toBe('You clicked this button odd number (1) of times');
  });
});
",
  "src/MyTestComponent/test/MyTestComponent.private.uni.driver.js": "import { myTestComponentDriverFactory as publicDriverFactory } from '../MyTestComponent.uni.driver';

export const myTestComponentPrivateDriverFactory = base => {
  return {
    ...publicDriverFactory(base),

    // Add here driver methods that considered \\"private\\"
  };
};
",
  "src/MyTestComponent/test/MyTestComponent.spec.js": "import React from 'react';
import { createRendererWithUniDriver, cleanup } from '../../../test/utils/unit';

import MyTestComponent from '../MyTestComponent';
import { myTestComponentPrivateDriverFactory } from './MyTestComponent.private.uni.driver';

describe('MyTestComponent', () => {
  const render = createRendererWithUniDriver(
    myTestComponentPrivateDriverFactory,
  );

  afterEach(() => {
    cleanup();
  });

  it('should render', async () => {
    const { driver } = render(<MyTestComponent />);

    expect(await driver.exists()).toBeTruthy();
    expect(await driver.getButtonText()).toEqual('Click me!');
  });

  it('should increment', async () => {
    const { driver } = render(<MyTestComponent />);

    await driver.clickButton();
    await driver.clickButton();

    expect(await driver.getCountText()).toEqual(
      'You clicked this button even number (2) of times',
    );
  });

  it('should allow changing the button text', async () => {
    const { driver } = render(<MyTestComponent buttonText=\\"Press me\\" />);

    expect(await driver.getButtonText()).toEqual('Press me');
  });
});
",
  "src/MyTestComponent/test/MyTestComponent.visual.js": "import React from 'react';
import { storiesOf } from '@storybook/react';
import MyTestComponent from '../MyTestComponent';

const commonProps = {
  //use for repeated props across the tests (e.g. {buttonText: 'example'})
};

const tests = [
  {
    describe: 'sanity', // prop name (e.g. size)
    its: [
      {
        it: 'default', //prop vaiation (e.g. small)
        props: {
          // the simulation (e.g. {size: \\"small\\"})
        },
      },
    ],
  },
];

tests.forEach(({ describe, its }) => {
  its.forEach(({ it, props }) => {
    storiesOf(\`MyTestComponent/\${describe}\`, module).add(it, () => (
      <MyTestComponent {...commonProps} {...props} />
    ));
  });
});
",
  "src/MyTestComponent/test/MyTestComponentStories.js": "import React from 'react';
import { storiesOf } from '@storybook/react';
import { getTestStoryKind } from '../../../stories/storiesHierarchy';
import { storySettings } from './storySettings';

import MyTestComponent from '..';

const TestStories = storiesOf(getTestStoryKind(storySettings), module);
const { testStoryNames, dataHook } = storySettings;

TestStories.add(testStoryNames.DEFAULT, () => (
  <MyTestComponent
    dataHook={dataHook}
    buttonText=\\"Press me for a surprise\\"
  />
));
",
  "src/MyTestComponent/test/storySettings.js": "import { Category } from '../../../stories/storiesHierarchy';

export const storySettings = {
  category: Category.TESTS,
  storyName: 'MyTestComponent',
  dataHook: 'story-my-test-component',
  testStoryNames: {
    DEFAULT: 'Default',
  },
};
",
}
`;
