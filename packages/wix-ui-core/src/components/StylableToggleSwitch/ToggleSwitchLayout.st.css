:import {
  -st-from: "./ToggleSwitch.st.css";
  -st-default: ToggleSwitch;
}

:vars {
  rootWidth: 48px;
  rootHeight: 24px;
  trackWidth: value(rootWidth);
  trackHeight: value(rootHeight);
  knobWidth: calc(value(rootHeight) / 1.2);
  knobHeight: calc(value(rootHeight) / 1.2);
  knobMovementRange: calc(value(trackWidth) - value(knobWidth) - value(trackHeight) + value(knobHeight));
}

.root {
  -st-extends: ToggleSwitch;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  width: value(rootWidth);
  height: value(rootHeight);
  box-sizing: border-box;
}

.root::track {
  box-sizing: border-box;
  width: value(trackWidth);
  height: value(trackHeight);
  border-radius: calc(value(trackHeight) / 2);
}

.root::knob {
  position: absolute;
  box-sizing: border-box;
  width: value(knobWidth);
  height: value(knobHeight);
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: calc(value(knobHeight) / 2);
  transform: translateX(calc(value(knobMovementRange) / -2));

  /* Workaround for Firefox, which doesn't center absolutely positioned flex items */
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  margin: auto;
}

.root::knobIcon {
  width: calc(value(knobHeight) / 2);
  height: calc(value(knobHeight) / 2);
}

.root::knobIcon > svg {
  display: block;
  width: 100%;
  height: 100%;
}

.root:checked::knob {
  transform: translateX(calc(value(knobMovementRange) / 2));
}

.root[dir=rtl]::knob {
  transform: translateX(calc(value(knobMovementRange) / 2));
}

.root[dir=rtl]:checked::knob {
  transform: translateX(calc(value(knobMovementRange) / -2));
}
